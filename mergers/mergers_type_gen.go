// Code generated by go generate; DO NOT EDIT.
package mergers

import (
	"fmt"
	"github.com/graphql-go/graphql/language/ast"
	"github.com/graphql-go/graphql/language/printer"
	"github.com/richardwilkes/toolbox/errs"
)

var _ = fmt.Sprint
var _ = printer.Print

// SimilarType merges declarations of Type that share the same Type value.
// This uses the default basic merge strategy.
func SimilarType(curr []ast.Type, more ...ast.Type) ([]ast.Type, error) {
	return Basic.SimilarType(curr, more...)
}

// OneType attempts to merge all members of Type into a singe ast.Type.
// If this cannot be done, this method will return an error.
// This uses the default basic merge strategy.
func OneType(curr []ast.Type, more ...ast.Type) (ast.Type, error) {
	return Basic.OneType(curr, more...)
}

// SimilarType merges declarations of Type that share the same Type value.
func (m *Merger) SimilarType(curr []ast.Type, more ...ast.Type) ([]ast.Type, error) {
	if m == nil {
		return nil, errs.New("merger strategy was nil")
	}

	all := append(curr, more...)
	if len(all) <= 1 {
		return all, nil
	}

	groups := make(map[string][]ast.Type)
	for _, one := range all {
		if one == nil {
			continue
		}
		if key := fmt.Sprint(printer.Print(one)); key != "" {
			curr, _ := groups[key]
			groups[key] = append(curr, one)
		}
	}

	var out []ast.Type
	var errSet error

	for _, group := range groups {
		if merged, err := m.OneType(group); err != nil {
			errSet = errs.Append(errSet, err)
		} else if merged != nil {
			out = append(out, merged)
		}
	}

	return out, errSet
}

// OneType attempts to merge all members of Type into a singe ast.Type.
// If this cannot be done, this method will return an error.
func (m *Merger) OneType(curr []ast.Type, more ...ast.Type) (ast.Type, error) {
	if m == nil {
		return nil, errs.New("merger strategy was nil")
	}

	// escape hatch when no calculation is needed
	all := append(curr, more...)
	if n := len(all); n == 0 {
		return nil, nil
	} else if n == 1 {
		return all[0], nil
	}

	var errSet error

	// merge properties

	switch all[0].(type) {
	case *ast.List:
		var set []*ast.List
		for _, single := range all {
			v, ok := single.(*ast.List)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.List but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneList(set)
	case *ast.Named:
		var set []*ast.Named
		for _, single := range all {
			v, ok := single.(*ast.Named)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.Named but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneNamed(set)
	case *ast.NonNull:
		var set []*ast.NonNull
		for _, single := range all {
			v, ok := single.(*ast.NonNull)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.NonNull but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneNonNull(set)
	default:
		errSet = errs.Append(errSet, errs.Newf("type %T unknown", all[0]))
	}

	return nil, errSet

}
