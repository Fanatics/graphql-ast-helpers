// Code generated by go generate; DO NOT EDIT.
package mergers

import (
	"fmt"
	"github.com/graphql-go/graphql/language/ast"
	"github.com/graphql-go/graphql/language/printer"
	"github.com/richardwilkes/toolbox/errs"
)

var _ = fmt.Sprint
var _ = printer.Print

// SimilarInterfaceDefinition merges declarations of InterfaceDefinition that share the same InterfaceDefinition value.
func (m *Merger) SimilarInterfaceDefinition(curr []*ast.InterfaceDefinition, more ...*ast.InterfaceDefinition) ([]*ast.InterfaceDefinition, error) {
	all := append(curr, more...)
	if len(all) <= 1 {
		return all, nil
	}

	groups := make(map[string][]*ast.InterfaceDefinition)
	for _, one := range all {
		name := fmt.Sprint(printer.Print(one.Name))
		if name != "" {
			curr, _ := groups[name]
			groups[name] = append(curr, one)
		}
	}

	var out []*ast.InterfaceDefinition
	var errSet error

	for _, group := range groups {
		if merged, err := m.OneInterfaceDefinition(group); err != nil {
			errSet = errs.Append(errSet, err)
		} else if merged != nil {
			out = append(out, merged)
		}
	}

	return out, errSet
}

// OneInterfaceDefinition attempts to merge all members of InterfaceDefinition into a singe *ast.InterfaceDefinition.
// If this cannot be done, this method will return an error.
func (m *Merger) OneInterfaceDefinition(curr []*ast.InterfaceDefinition, more ...*ast.InterfaceDefinition) (*ast.InterfaceDefinition, error) {
	// step 1 - escape hatch when no calculation is needed
	all := append(curr, more...)
	if n := len(all); n == 0 {
		return nil, nil
	} else if n == 1 {
		return all[0], nil
	}

	// step 2 - prepare property collections (if any)
	var names []*ast.Name
	var descriptions []*ast.StringValue
	var directives []*ast.Directive

	// step 3 - range over the parent struct and collect properties
	for _, one := range all {
		// 3.a - prevent empty loop from making syntax errors
		_ = one

		// 3.b - accrue properties
		names = append(names, one.Name)
		descriptions = append(descriptions, one.Description)
		directives = append(directives, one.Directives...)
	}

	// step 4 - prepare output types
	one := ast.NewInterfaceDefinition(nil)
	var errSet error

	// step 5 - merge properties
	if single, err := m.OneName(names); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Name = single
	}
	if single, err := m.OneStringValue(descriptions); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Description = single
	}
	if many, err := m.SimilarDirective(directives); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Directives = many
	}

	return one, errSet
}
