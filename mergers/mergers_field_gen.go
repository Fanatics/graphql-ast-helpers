// Code generated by go generate; DO NOT EDIT.
package mergers

import (
	"fmt"
	"github.com/graphql-go/graphql/language/ast"
	"github.com/graphql-go/graphql/language/printer"
	"github.com/richardwilkes/toolbox/errs"
)

var _ = fmt.Sprint
var _ = printer.Print

// SimilarField merges declarations of Field that share the same Field value.
// This uses the default basic merge strategy.
func SimilarField(curr []*ast.Field, more ...*ast.Field) ([]*ast.Field, error) {
	return Basic.SimilarField(curr, more...)
}

// OneField attempts to merge all members of Field into a singe *ast.Field.
// If this cannot be done, this method will return an error.
// This uses the default basic merge strategy.
func OneField(curr []*ast.Field, more ...*ast.Field) (*ast.Field, error) {
	return Basic.OneField(curr, more...)
}

// SimilarField merges declarations of Field that share the same Field value.
func (m *Merger) SimilarField(curr []*ast.Field, more ...*ast.Field) ([]*ast.Field, error) {
	if m == nil {
		return nil, errs.New("merger strategy was nil")
	}

	all := append(curr, more...)
	if len(all) <= 1 {
		return all, nil
	}

	groups := make(map[string][]*ast.Field)
	for _, one := range all {
		if key := fmt.Sprint(printer.Print(one.Name)); key != "" {
			curr, _ := groups[key]
			groups[key] = append(curr, one)
		}
	}

	var out []*ast.Field
	var errSet error

	for _, group := range groups {
		if merged, err := m.OneField(group); err != nil {
			errSet = errs.Append(errSet, err)
		} else if merged != nil {
			out = append(out, merged)
		}
	}

	return out, errSet
}

// OneField attempts to merge all members of Field into a singe *ast.Field.
// If this cannot be done, this method will return an error.
func (m *Merger) OneField(curr []*ast.Field, more ...*ast.Field) (*ast.Field, error) {
	if m == nil {
		return nil, errs.New("merger strategy was nil")
	}

	// escape hatch when no calculation is needed
	all := append(curr, more...)
	if n := len(all); n == 0 {
		return nil, nil
	} else if n == 1 {
		return all[0], nil
	}
	// prepare property collections
	var listAlias []*ast.Name
	var listName []*ast.Name
	var listArguments []*ast.Argument
	var listDirectives []*ast.Directive
	var listSelectionSet []*ast.SelectionSet
	// range over the parent struct and collect properties
	for _, one := range all {
		listAlias = append(listAlias, one.Alias)
		listName = append(listName, one.Name)
		listArguments = append(listArguments, one.Arguments...)
		listDirectives = append(listDirectives, one.Directives...)
		listSelectionSet = append(listSelectionSet, one.SelectionSet)
	}

	var errSet error

	// merge properties

	one := ast.NewField(nil)
	if merged, err := m.OneName(listAlias); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Alias = merged
	}
	if merged, err := m.OneName(listName); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Name = merged
	}
	if merged, err := m.SimilarArgument(listArguments); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Arguments = merged
	}
	if merged, err := m.SimilarDirective(listDirectives); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Directives = merged
	}
	if merged, err := m.OneSelectionSet(listSelectionSet); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.SelectionSet = merged
	}

	return one, errSet

}
