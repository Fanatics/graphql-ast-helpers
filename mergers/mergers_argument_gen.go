// Code generated by go generate; DO NOT EDIT.
package mergers

import (
	"fmt"
	"github.com/graphql-go/graphql/language/ast"
	"github.com/graphql-go/graphql/language/printer"
	"github.com/richardwilkes/toolbox/errs"
)

var _ = fmt.Sprint
var _ = printer.Print

// SimilarArgument merges declarations of Argument that share the same Argument value.
// This uses the default basic merge strategy.
func SimilarArgument(curr []*ast.Argument, more ...*ast.Argument) ([]*ast.Argument, error) {
	return Basic.SimilarArgument(curr, more...)
}

// OneArgument attempts to merge all members of Argument into a singe *ast.Argument.
// If this cannot be done, this method will return an error.
// This uses the default basic merge strategy.
func OneArgument(curr []*ast.Argument, more ...*ast.Argument) (*ast.Argument, error) {
	return Basic.OneArgument(curr, more...)
}

// SimilarArgument merges declarations of Argument that share the same Argument value.
func (m *Merger) SimilarArgument(curr []*ast.Argument, more ...*ast.Argument) ([]*ast.Argument, error) {
	if m == nil {
		return nil, errs.New("merger strategy was nil")
	}

	all := append(curr, more...)
	if len(all) <= 1 {
		return all, nil
	}

	groups := make(map[string][]*ast.Argument)
	for _, one := range all {
		if key := fmt.Sprint(printer.Print(one.Name)); key != "" {
			curr, _ := groups[key]
			groups[key] = append(curr, one)
		}
	}

	var out []*ast.Argument
	var errSet error

	for _, group := range groups {
		if merged, err := m.OneArgument(group); err != nil {
			errSet = errs.Append(errSet, err)
		} else if merged != nil {
			out = append(out, merged)
		}
	}

	return out, errSet
}

// OneArgument attempts to merge all members of Argument into a singe *ast.Argument.
// If this cannot be done, this method will return an error.
func (m *Merger) OneArgument(curr []*ast.Argument, more ...*ast.Argument) (*ast.Argument, error) {
	if m == nil {
		return nil, errs.New("merger strategy was nil")
	}

	// escape hatch when no calculation is needed
	all := append(curr, more...)
	if n := len(all); n == 0 {
		return nil, nil
	} else if n == 1 {
		return all[0], nil
	}
	// prepare property collections
	var listName []*ast.Name
	var listValue []ast.Value
	// range over the parent struct and collect properties
	for _, one := range all {
		listName = append(listName, one.Name)
		listValue = append(listValue, one.Value)
	}

	var errSet error

	// merge properties

	one := ast.NewArgument(nil)
	if merged, err := m.OneName(listName); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Name = merged
	}
	if merged, err := m.OneValue(listValue); err != nil {
		errSet = errs.Append(errSet, err)
	} else {
		one.Value = merged
	}

	return one, errSet

}
