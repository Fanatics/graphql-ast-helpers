// Code generated by go generate; DO NOT EDIT.
package mergers

import (
	"fmt"
	"github.com/graphql-go/graphql/language/ast"
	"github.com/graphql-go/graphql/language/printer"
	"github.com/richardwilkes/toolbox/errs"
)

var _ = fmt.Sprint
var _ = printer.Print

// SimilarSelection merges declarations of Selection that share the same Selection value.
func (m *Merger) SimilarSelection(curr []ast.Selection, more ...ast.Selection) ([]ast.Selection, error) {
	all := append(curr, more...)
	if len(all) <= 1 {
		return all, nil
	}

	groups := make(map[string][]ast.Selection)
	for _, one := range all {
		if key := "selection"; key != "" {
			curr, _ := groups[key]
			groups[key] = append(curr, one)
		}
	}

	var out []ast.Selection
	var errSet error

	for _, group := range groups {
		if merged, err := m.OneSelection(group); err != nil {
			errSet = errs.Append(errSet, err)
		} else if merged != nil {
			out = append(out, merged)
		}
	}

	return out, errSet
}

// OneSelection attempts to merge all members of Selection into a singe ast.Selection.
// If this cannot be done, this method will return an error.
func (m *Merger) OneSelection(curr []ast.Selection, more ...ast.Selection) (ast.Selection, error) {
	// step 1 - escape hatch when no calculation is needed
	all := append(curr, more...)
	if n := len(all); n == 0 {
		return nil, nil
	} else if n == 1 {
		return all[0], nil
	}

	var errSet error

	// merge properties

	switch all[0].(type) {
	case *ast.DirectiveDefinition:
		var set []*ast.DirectiveDefinition
		for _, single := range all {
			v, ok := single.(*ast.DirectiveDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.DirectiveDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneDirectiveDefinition(set)
	case *ast.EnumDefinition:
		var set []*ast.EnumDefinition
		for _, single := range all {
			v, ok := single.(*ast.EnumDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.EnumDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneEnumDefinition(set)
	case *ast.Field:
		var set []*ast.Field
		for _, single := range all {
			v, ok := single.(*ast.Field)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.Field but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneField(set)
	case *ast.FragmentDefinition:
		var set []*ast.FragmentDefinition
		for _, single := range all {
			v, ok := single.(*ast.FragmentDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.FragmentDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneFragmentDefinition(set)
	case *ast.FragmentSpread:
		var set []*ast.FragmentSpread
		for _, single := range all {
			v, ok := single.(*ast.FragmentSpread)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.FragmentSpread but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneFragmentSpread(set)
	case *ast.InlineFragment:
		var set []*ast.InlineFragment
		for _, single := range all {
			v, ok := single.(*ast.InlineFragment)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.InlineFragment but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneInlineFragment(set)
	case *ast.InputObjectDefinition:
		var set []*ast.InputObjectDefinition
		for _, single := range all {
			v, ok := single.(*ast.InputObjectDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.InputObjectDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneInputObjectDefinition(set)
	case *ast.InterfaceDefinition:
		var set []*ast.InterfaceDefinition
		for _, single := range all {
			v, ok := single.(*ast.InterfaceDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.InterfaceDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneInterfaceDefinition(set)
	case *ast.ObjectDefinition:
		var set []*ast.ObjectDefinition
		for _, single := range all {
			v, ok := single.(*ast.ObjectDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.ObjectDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneObjectDefinition(set)
	case *ast.OperationDefinition:
		var set []*ast.OperationDefinition
		for _, single := range all {
			v, ok := single.(*ast.OperationDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.OperationDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneOperationDefinition(set)
	case *ast.ScalarDefinition:
		var set []*ast.ScalarDefinition
		for _, single := range all {
			v, ok := single.(*ast.ScalarDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.ScalarDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneScalarDefinition(set)
	case *ast.SchemaDefinition:
		var set []*ast.SchemaDefinition
		for _, single := range all {
			v, ok := single.(*ast.SchemaDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.SchemaDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneSchemaDefinition(set)
	case *ast.TypeExtensionDefinition:
		var set []*ast.TypeExtensionDefinition
		for _, single := range all {
			v, ok := single.(*ast.TypeExtensionDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.TypeExtensionDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneTypeExtensionDefinition(set)
	case *ast.UnionDefinition:
		var set []*ast.UnionDefinition
		for _, single := range all {
			v, ok := single.(*ast.UnionDefinition)
			if !ok {
				errSet = errs.Append(errSet, errs.Newf("want *ast.UnionDefinition but got type %T", single))
				continue
			}
			set = append(set, v)
		}
		return m.OneUnionDefinition(set)
	default:
		errSet = errs.Append(errSet, errs.Newf("type %T unknown", all[0]))
	}

	return nil, errSet

}
